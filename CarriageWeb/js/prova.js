// this code was autogenerated from PJS
(function($p) {
    var Box = (function() {
        function Box() {
            var $this_1 = this;

            function $superCstr() {
                $p.extendClassChain($this_1)
            }
            $this_1.frameColor = $p.createJavaArray('int', [3]);
            $this_1.frameInactiveColor = $p.createJavaArray('int', [3]);
            $this_1.frameActiveColor = $p.createJavaArray('int', [3]);
            $this_1.frameUsedColor = $p.createJavaArray('int', [3]);
            $this_1.fillColor = $p.createJavaArray('int', [3]);
            $this_1.fontColor = $p.createJavaArray('int', [3]);
            $this_1.fontSize = 0;
            $this_1.keyword = null;
            $this_1.boxWidth = 0;
            $this_1.boxHeight = 0;
            $this_1.positionH = 0;
            $this_1.positionV = 0;
            $this_1.positionHmov = 0;
            $this_1.positionVmov = 0;
            $this_1.status = 1;
            $this_1.fillTransparency = 150;
            $this_1.fontTransparency = 255;
            $this_1.openParenthesis = "";
            $this_1.closedParenthesis = "";
            $this_1.openBrackets = "";
            $this_1.closedBrackets = "";
            $this_1.comma = "";
            $this_1.transpSymbol = 0;
            $this_1.isAtBottom = false;
            $this_1.next = null;

            function drawBox$0() {
                $p.strokeWeight(2);
                $p.stroke($this_1.frameColor[0], $this_1.frameColor[1], $this_1.frameColor[2], $this_1.fontTransparency);
                $p.fill($this_1.fillColor[0], $this_1.fillColor[1], $this_1.fillColor[2], $this_1.fillTransparency);
                $p.rect($this_1.positionHmov, $this_1.positionVmov - delta / 2, $this_1.boxWidth, $this_1.boxHeight);
                $p.fill($this_1.fontColor[0], $this_1.fontColor[1], $this_1.fontColor[2], $this_1.fontTransparency);
                $p.textFont(font, fontSizeRef);
                $p.text($this_1.keyword, $this_1.positionHmov, $this_1.positionVmov + 8 - delta / 2, $this_1.boxWidth, $this_1.boxHeight);
            }
            $p.addMethod($this_1, 'drawBox', drawBox$0, false);

            function drawPunctuation$0() {
                $p.fill(0, 0, 0, $this_1.transpSymbol);
                $p.text($this_1.openParenthesis, $this_1.positionH + $this_1.boxWidth, $this_1.positionV + 4, punctuationGapLR, $this_1.boxHeight);
                $p.text($this_1.closedParenthesis, posHClosedParenthesis, posVClosedParenthesis + 4, punctuationGapLR, $this_1.boxHeight);
                $p.text($this_1.openBrackets, $this_1.positionH - punctuationGapLR, $this_1.positionV + 4, punctuationGapLR, $this_1.boxHeight);
                $p.text($this_1.closedBrackets, $this_1.positionH + $this_1.boxWidth, $this_1.positionV + 4, punctuationGapLR, $this_1.boxHeight);
                $p.text($this_1.comma, $this_1.positionH - punctuationGapLR, $this_1.positionV + 5, punctuationGapLR, $this_1.boxHeight);
                $p.fill(0, 0, 0, 255 * $p.sin(frameCounter));
                $p.text("â–’", posHPrompt + punctuationGapLR - delta / 2, posVPrompt + 4, punctuationGapLR, $this_1.boxHeight);
            }
            $p.addMethod($this_1, 'drawPunctuation', drawPunctuation$0, false);

            function reallocate$2(posH, posV) {
                $this_1.positionH = posH;
                $this_1.positionV = posV;
            }
            $p.addMethod($this_1, 'reallocate', reallocate$2, false);

            function updateColors$0() {
                if ($this_1.status == 3 && $this_1.isAtBottom) {
                    $this_1.frameColor[0] = 0;
                    $this_1.frameColor[1] = 0;
                    $this_1.frameColor[2] = 0;
                    $this_1.fontColor[0] = 0;
                    $this_1.fontColor[1] = 0;
                    $this_1.fontColor[2] = 0;
                    $this_1.fillTransparency = 0;
                    $this_1.fontTransparency = 255;
                } else if ($this_1.status == 1) {
                    $this_1.frameColor[0] = 0;
                    $this_1.frameColor[1] = 255;
                    $this_1.frameColor[2] = 0;
                    $this_1.fontColor[0] = 255;
                    $this_1.fontColor[1] = 255;
                    $this_1.fontColor[2] = 255;
                    $this_1.fillTransparency = 255;
                    $this_1.fontTransparency = 255;
                    $this_1.transpSymbol = 0;
                } else {
                    $this_1.frameColor[0] = 255;
                    $this_1.frameColor[1] = 255;
                    $this_1.frameColor[2] = 255;
                    $this_1.fontColor[0] = 255;
                    $this_1.fontColor[1] = 255;
                    $this_1.fontColor[2] = 255;
                    $this_1.fillTransparency = 150;
                    $this_1.fontTransparency = 150;
                }
            }
            $p.addMethod($this_1, 'updateColors', updateColors$0, false);

            function isClicked$0() {
                if ($p.mouseX > $this_1.positionHmov && $p.mouseX < $this_1.positionHmov + $this_1.boxWidth && $p.mouseY > $this_1.positionVmov && $p.mouseY < $this_1.positionVmov + $this_1.boxHeight) {
                    $this_1.$self.updateColors();

                    var time = $p.millis();
                    while ($p.millis() - time < 200) {

                    }

                    return true;
                } else return false;
            }
            $p.addMethod($this_1, 'isClicked', isClicked$0, false);

            function move$0() {
                $this_1.positionHmov += 0.1 * ($this_1.positionH - $this_1.positionHmov);
                $this_1.positionVmov += 0.1 * ($this_1.positionV - $this_1.positionVmov);
                if ($this_1.status == 3 && $p.abs($this_1.positionH - $this_1.positionHmov) < $this_1.boxHeight && $p.abs($this_1.positionV - $this_1.positionVmov) < 5) {
                    $this_1.transpSymbol = $p.min(255, $this_1.transpSymbol + 5);
                    $this_1.fillTransparency = $p.min(255, $this_1.fillTransparency + 1);
                    $this_1.isAtBottom = true;
                    $this_1.$self.updateColors();
                }
            }
            $p.addMethod($this_1, 'move', move$0, false);

            function setStatus$1(stat) {
                $this_1.status = stat;
                if ($this_1.status != 3) {
                    $this_1.isAtBottom = false;
                }
                $this_1.$self.updateColors();
            }
            $p.addMethod($this_1, 'setStatus', setStatus$1, false);

            function getStatus$0() {
                return $this_1.status;
            }
            $p.addMethod($this_1, 'getStatus', getStatus$0, false);

            function getKey$0() {
                return $this_1.keyword;
            }
            $p.addMethod($this_1, 'getKey', getKey$0, false);

            function $constr_4(keyw, posH, posV, fontSizeR) {
                $superCstr();

                $this_1.frameUsedColor[0] = 118;
                $this_1.frameUsedColor[1] = 118;
                $this_1.frameUsedColor[2] = 118;
                $this_1.frameColor[0] = 0;
                $this_1.frameColor[1] = 255;
                $this_1.frameColor[2] = 0;
                $this_1.fillColor[0] = 0;
                $this_1.fillColor[1] = 0;
                $this_1.fillColor[2] = 0;
                $this_1.fontColor[0] = 255;
                $this_1.fontColor[1] = 255;
                $this_1.fontColor[2] = 255;
                $this_1.fontSize = fontSizeR;

                $this_1.keyword = keyw;

                $this_1.boxWidth = fontSizeR * 0.65 * $this_1.keyword.length + delta;
                $this_1.boxHeight = fontSizeR * 1.5;
                $this_1.positionH = $this_1.positionHmov = posH;
                $this_1.positionV = $this_1.positionVmov = posV;
            }

            function $constr() {
                if (arguments.length === 4) {
                    $constr_4.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        return Box;
    })();
    $p.Box = Box;
    var BoxCommand = (function() {
        function BoxCommand() {
            var $this_1 = this;
            var $super = {
                $upcast: $this_1
            };

            function $superCstr() {
                Box.apply($super, arguments);
                if (! ('$self' in $super)) $p.extendClassChain($super)
            }
            $this_1.next = null;

            function $constr_4(keyw, posH, posV, fontSizeR) {
                $superCstr(keyw, posH, posV, fontSizeR);
            }

            function $constr() {
                if (arguments.length === 4) {
                    $constr_4.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        $p.extendStaticMembers(BoxCommand, Box);
        BoxCommand.$base = Box;
        return BoxCommand;
    })();
    $p.BoxCommand = BoxCommand;
    var BoxItem = (function() {
        function BoxItem() {
            var $this_1 = this;
            var $super = {
                $upcast: $this_1
            };

            function $superCstr() {
                Box.apply($super, arguments);
                if (! ('$self' in $super)) $p.extendClassChain($super)
            }
            $this_1.next = null;

            function $constr_4(keyw, posH, posV, fontSizeR) {
                $superCstr(keyw, posH, posV, fontSizeR);
            }

            function $constr() {
                if (arguments.length === 4) {
                    $constr_4.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        $p.extendStaticMembers(BoxItem, Box);
        BoxItem.$base = Box;
        return BoxItem;
    })();
    $p.BoxItem = BoxItem;
    var BoxOption = (function() {
        function BoxOption() {
            var $this_1 = this;
            var $super = {
                $upcast: $this_1
            };

            function $superCstr() {
                Box.apply($super, arguments);
                if (! ('$self' in $super)) $p.extendClassChain($super)
            }
            $this_1.next = null;

            function $constr_4(keyw, posH, posV, fontSizeR) {
                $superCstr(keyw, posH, posV, fontSizeR);
            }

            function $constr() {
                if (arguments.length === 4) {
                    $constr_4.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        $p.extendStaticMembers(BoxOption, Box);
        BoxOption.$base = Box;
        return BoxOption;
    })();
    $p.BoxOption = BoxOption;

    var mobile = false;

    var fontSizeRef = 22;

    var boxHorizontalGap = 15,
        boxVerticalGap = 15,
        boxHorizontalGapCommandLine = boxHorizontalGap * 2;
    var startingHPosC = 0,
        startingHPosI = 0,
        startingHPosO = 0;
    var delta = 10;
    var marginLeftRight = delta;
    var marginTopC = delta;
    var executeButtonGap = fontSizeRef * 2.5;
    var punctuationGapLR = boxHorizontalGapCommandLine;
    var promptGap = fontSizeRef * 3;

    var execButtonColor = $p.createJavaArray('int', [3]);
    var execActiveColor = $p.createJavaArray('int', [3]);
    var execInactiveColor = $p.createJavaArray('int', [3]);
    var execStatus = false;

    var frameCounter = 0;
    var posHCounter = 0;
    var posVCounterC = 0,
        posVCounterI = 0,
        posVCounterO = 0;
    var posHCounterSentence = 0;
    var posVCounterSentence = 0;
    var posHClosedParenthesis = 0;
    var posVClosedParenthesis = 0;
    var posHPrompt = 0;
    var posVPrompt = 0;
    var nSongs = 0;
    var numberOfRndSongs = 0;

    var cwords = [
        "play", "repeat", "random"
        ];

    var allsongsKey = "all songs";
    var iwords = [
        allsongsKey, "1", "2", "3", "4", "5"
        ];

    var shuffleKey = "shuffle";
    var owords = [
        shuffleKey, "loud"
        ];

    var parOpen = (new $p.Character('('));
    var parClosed = (new $p.Character(')'));
    var bracketOpen = (new $p.Character('['));
    var bracketClosed = (new $p.Character(']'));
    var comma = (new $p.Character(','));

    var cboxes = $p.createJavaArray('BoxCommand', [cwords.length]);
    var iboxes = $p.createJavaArray('BoxItem', [iwords.length]);
    var oboxes = $p.createJavaArray('BoxOption', [owords.length]);

    var bcHead = null;
    var biHead = null;
    var boHead = null;

    var sentence = null;

    var font = null;

    function setup() {
        font = $p.createFont("Silom", 32, true);
        $p.textFont(font, fontSizeRef);

        $p.frameRate(30);
        if (mobile) {
            $p.size(400, 400);
        } else {
            $p.size(960, 320);
        }
        $p.textSize(fontSizeRef);
        $p.textAlign($p.CENTER);

        for (var w = 0; w < cwords.length; w++) {
            cboxes[w] = new BoxCommand(cwords[w], 0, 0, fontSizeRef);
        }

        for (var w = 0; w < iwords.length; w++) {
            iboxes[w] = new BoxItem(iwords[w], 0, 0, fontSizeRef);
            iboxes[w].setStatus(2);
        }

        for (var w = 0; w < owords.length; w++) {
            oboxes[w] = new BoxOption(owords[w], 0, 0, fontSizeRef);
            oboxes[w].setStatus(2);
        }

        relocateBoxes();
    }
    $p.setup = setup;
    setup = setup.bind($p);

    function draw() {
        if ($p.__mousePressed) {
            actionHandler();
        }
        frameCounter += 0.1;

        $p.background(0, 0, 0, 1.0);
        $p.fill(240);
        $p.noStroke();
        if (mobile) {
            $p.rect(marginLeftRight / 2, $p.height / 2, $p.width - marginLeftRight, $p.height / 2 - executeButtonGap - delta / 2, 5);
            $p.fill(execButtonColor[0], execButtonColor[1], execButtonColor[2]);
            $p.rect(marginLeftRight / 2, $p.height - executeButtonGap, $p.width - marginLeftRight, executeButtonGap - delta / 2, 5);
            $p.fill(0, 0, 0);
            $p.text(">>", marginLeftRight, $p.height / 2 + marginTopC + 4, promptGap / 2, fontSizeRef * 1.5);
        } else {
            $p.rect(marginLeftRight / 2, $p.height - (fontSizeRef * 3) + delta / 4 - 2, $p.width - marginLeftRight - executeButtonGap, (fontSizeRef * 2) - delta / 2 + 2, 5);
            $p.fill(execButtonColor[0], execButtonColor[1], execButtonColor[2]);
            $p.triangle($p.width - executeButtonGap, $p.height - (fontSizeRef * 3) + delta / 4 - 1, $p.width - delta * 2, $p.height - fontSizeRef * 2 - 2, $p.width - executeButtonGap, $p.height - fontSizeRef - 2);
            $p.fill(0, 0, 0);
            $p.text(">>", marginLeftRight, $p.height - (fontSizeRef * 3) + marginTopC + 4, promptGap / 2, fontSizeRef * 1.5);
        }
        updateExecButtonColor();

        for (var $it0 = new $p.ObjectIterator(cboxes), c = void(0); $it0.hasNext() && ((c = $it0.next()) || true);) {
            c.move();
            c.drawBox();
            c.drawPunctuation();
        }
        for (var $it1 = new $p.ObjectIterator(iboxes), i = void(0); $it1.hasNext() && ((i = $it1.next()) || true);) {
            i.move();
            i.drawBox();
            i.drawPunctuation();
        }
        for (var $it2 = new $p.ObjectIterator(oboxes), o = void(0); $it2.hasNext() && ((o = $it2.next()) || true);) {
            o.move();
            o.drawBox();
            o.drawPunctuation();
        }
        if (frameCounter >= 300) {
            frameCounter = 0;
        }
    }
    $p.draw = draw;
    draw = draw.bind($p);

    function actionHandler() {
        for (var $it3 = new $p.ObjectIterator(cboxes), c = void(0); $it3.hasNext() && ((c = $it3.next()) || true);) {
            if (c.isClicked()) {
                if (c.getStatus() == 3) {
                    removeCommandAndRelocateBoxes(c);
                }

                else if (c.getStatus() == 1) {
                    if (c.getKey() == "random") {
                        randomSentence();
                        break;
                    }
                    insertCommandAndRelocateBoxes(c);
                }
            }
        }

        for (var $it4 = new $p.ObjectIterator(iboxes), i = void(0); $it4.hasNext() && ((i = $it4.next()) || true);) {
            if (i.isClicked()) {
                if (i.getStatus() == 3) {
                    removeItemAndRelocateBoxes(i);
                }

                else if (i.getStatus() == 1) {
                    insertItemAndRelocateBoxes(i);
                }
            }
        }

        for (var $it5 = new $p.ObjectIterator(oboxes), o = void(0); $it5.hasNext() && ((o = $it5.next()) || true);) {
            if (o.isClicked()) {
                if (o.getStatus() == 3) {
                    removeOptionAndRelocateBoxes(o);
                } else if (o.getStatus() == 1) {
                    insertOptionAndRelocateBoxes(o);
                }
            }
        }

        relocateBoxes();

        if (isExecButtonClicked()) {

        }
    }
    $p.actionHandler = actionHandler;
    actionHandler = actionHandler.bind($p);

    function updateExecButtonColor() {
        if (execStatus) {
            execButtonColor[0] = 0;
            execButtonColor[1] = 255;
            execButtonColor[2] = 0;
        } else {
            execButtonColor[0] = 118;
            execButtonColor[1] = 118;
            execButtonColor[2] = 118;
        }
    }
    $p.updateExecButtonColor = updateExecButtonColor;
    updateExecButtonColor = updateExecButtonColor.bind($p);

    function randomSentence() {
        var unodue = $p.__int_cast(($p.random(0, 2)));
        insertCommandAndRelocateBoxes(cboxes[unodue]);

        var songs = $p.__int_cast(($p.random(0, 2)));
        if (songs == 1) {
            generateRandomSongList();
        } else {
            insertItemAndRelocateBoxes(iboxes[0]);
        }

        var options = $p.__int_cast(($p.random(0, 3)));
        if (options == 1) {
            var whichOption = $p.__int_cast(($p.random(0, 2)));
            if (numberOfRndSongs == 1) insertOptionAndRelocateBoxes(oboxes[1]);
            else insertOptionAndRelocateBoxes(oboxes[whichOption]);
        } else if (options == 2) {
            if (numberOfRndSongs != 1) insertOptionAndRelocateBoxes(oboxes[0]);
            insertOptionAndRelocateBoxes(oboxes[1]);
        }
    }
    $p.randomSentence = randomSentence;
    randomSentence = randomSentence.bind($p);

    function generateRandomSongList() {
        var isFirstOccurrence = false;
        var songNumber = 0,
            count = 0;
        numberOfRndSongs = $p.__int_cast(($p.random(1, 6)));
        var rndsongs = $p.createJavaArray('int', [numberOfRndSongs]);

        do {
            isFirstOccurrence = true;
            songNumber = $p.__int_cast(($p.random(0, 6)));

            for (var i = 0; i < rndsongs.length; i++) {
                if (rndsongs[i] == songNumber) isFirstOccurrence = false;
            }
            if (isFirstOccurrence) {
                rndsongs[count] = songNumber;
                count++;
            }
        }
        while (count < numberOfRndSongs);

        for (var r = 0; r < rndsongs.length; r++) {
            insertItemAndRelocateBoxes(iboxes[rndsongs[r]]);
        }
    }
    $p.generateRandomSongList = generateRandomSongList;
    generateRandomSongList = generateRandomSongList.bind($p);

    function isExecButtonClicked() {
        if (mobile) {
            if (execStatus) {
                if ($p.mouseX > (delta / 2) && $p.mouseX < ($p.width - delta / 2) && $p.mouseY > ($p.height - (executeButtonGap + marginLeftRight / 2)) && $p.mouseY < ($p.height - marginLeftRight / 2)) {
                    giveMeMySentence();

                    var time = $p.millis();
                    while ($p.millis() - time < 200) {

                    }

                    return true;
                } else return false;
            }
        } else {
            if (execStatus) {
                if ($p.mouseX > ($p.width - executeButtonGap) && $p.mouseX < $p.width && $p.mouseY > ($p.height - (fontSizeRef * 3) + delta / 4 - 1) && $p.mouseY < $p.height - fontSizeRef) {
                    giveMeMySentence();

                    var time = $p.millis();
                    while ($p.millis() - time < 200) {

                    }

                    return true;
                } else return false;
            }
        }
    }
    $p.isExecButtonClicked = isExecButtonClicked;
    isExecButtonClicked = isExecButtonClicked.bind($p);

    function giveMeMySentence() {
        return sentence;
    }
    $p.giveMeMySentence = giveMeMySentence;
    giveMeMySentence = giveMeMySentence.bind($p);

    function printSentence() {
        for (var $it6 = new $p.ObjectIterator(sentence), z = void(0); $it6.hasNext() && ((z = $it6.next()) || true);)
        $p.print(z + "  ");
        $p.println();
    }
    $p.printSentence = printSentence;
    printSentence = printSentence.bind($p);

    function removeCommandAndRelocateBoxes(c) {
        removeBoxCommand(c);
        for (var $it7 = new $p.ObjectIterator(cboxes), cc = void(0); $it7.hasNext() && ((cc = $it7.next()) || true);) {
            cc.setStatus(1);
        }
        for (var $it8 = new $p.ObjectIterator(iboxes), i = void(0); $it8.hasNext() && ((i = $it8.next()) || true);) {
            if (i.getStatus() == 3) {
                removeBoxItem(i);
            }
            i.setStatus(2);
            nSongs = 0;
        }
        for (var $it9 = new $p.ObjectIterator(oboxes), o = void(0); $it9.hasNext() && ((o = $it9.next()) || true);) {
            if (o.getStatus() == 3) {
                removeBoxOption(o);
            }
            o.setStatus(2);
        }
    }
    $p.removeCommandAndRelocateBoxes = removeCommandAndRelocateBoxes;
    removeCommandAndRelocateBoxes = removeCommandAndRelocateBoxes.bind($p);

    function insertCommandAndRelocateBoxes(c) {
        for (var $it10 = new $p.ObjectIterator(cboxes), cc = void(0); $it10.hasNext() && ((cc = $it10.next()) || true);) {
            cc.setStatus(2);
        }
        for (var $it11 = new $p.ObjectIterator(iboxes), i = void(0); $it11.hasNext() && ((i = $it11.next()) || true);) {
            i.setStatus(1);
        }
        for (var $it12 = new $p.ObjectIterator(oboxes), o = void(0); $it12.hasNext() && ((o = $it12.next()) || true);) {
            o.setStatus(2);
        }
        insertBoxCommand(c);
    }
    $p.insertCommandAndRelocateBoxes = insertCommandAndRelocateBoxes;
    insertCommandAndRelocateBoxes = insertCommandAndRelocateBoxes.bind($p);

    function removeItemAndRelocateBoxes(i) {
        removeBoxItem(i);
        if (i.getKey() == allsongsKey) {
            execStatus = false;
            for (var $it13 = new $p.ObjectIterator(oboxes), o = void(0); $it13.hasNext() && ((o = $it13.next()) || true);) {
                if (o.getStatus() == 3) removeBoxOption(o);
            }
            i.setStatus(1);
            for (var $it14 = new $p.ObjectIterator(iboxes), ii = void(0); $it14.hasNext() && ((ii = $it14.next()) || true);)
            ii.setStatus(1);
            for (var $it15 = new $p.ObjectIterator(oboxes), o = void(0); $it15.hasNext() && ((o = $it15.next()) || true);)
            o.setStatus(2);
        } else {
            nSongs--;
            if (nSongs == 0) {
                execStatus = false;
                for (var $it16 = new $p.ObjectIterator(oboxes), o = void(0); $it16.hasNext() && ((o = $it16.next()) || true);) {
                    if (o.getStatus() == 3) {
                        removeBoxOption(o);
                    }
                    o.setStatus(2);
                }
                for (var $it17 = new $p.ObjectIterator(iboxes), ii = void(0); $it17.hasNext() && ((ii = $it17.next()) || true);)
                if (ii.getKey() == allsongsKey) ii.setStatus(1);
            }
            if (nSongs == 1) {
                for (var $it18 = new $p.ObjectIterator(oboxes), o = void(0); $it18.hasNext() && ((o = $it18.next()) || true);)
                if (o.getKey() == shuffleKey) {
                    if (o.getStatus() == 3) {
                        removeBoxOption(o);
                    }
                    o.setStatus(2);
                }
            }
        }
    }
    $p.removeItemAndRelocateBoxes = removeItemAndRelocateBoxes;
    removeItemAndRelocateBoxes = removeItemAndRelocateBoxes.bind($p);

    function insertItemAndRelocateBoxes(i) {
        if (i.getKey() == allsongsKey) {
            for (var $it19 = new $p.ObjectIterator(iboxes), ii = void(0); $it19.hasNext() && ((ii = $it19.next()) || true);) {
                ii.setStatus(2);
            }
            i.setStatus(3);
            for (var $it20 = new $p.ObjectIterator(oboxes), o = void(0); $it20.hasNext() && ((o = $it20.next()) || true);)
            o.setStatus(1);
        } else {
            nSongs++;
            for (var $it21 = new $p.ObjectIterator(iboxes), ii = void(0); $it21.hasNext() && ((ii = $it21.next()) || true);)
            if (ii.getKey() == allsongsKey) ii.setStatus(2);
            if (nSongs == 1) {
                for (var $it22 = new $p.ObjectIterator(oboxes), o = void(0); $it22.hasNext() && ((o = $it22.next()) || true);)
                if (o.getKey() == shuffleKey) {
                    o.setStatus(2);
                } else o.setStatus(1);
            } else {
                for (var $it23 = new $p.ObjectIterator(oboxes), o = void(0); $it23.hasNext() && ((o = $it23.next()) || true);)
                if (o.getKey() == shuffleKey && o.getStatus() == 2) {
                    o.setStatus(1);
                }
            }
        }
        insertBoxItem(i);
    }
    $p.insertItemAndRelocateBoxes = insertItemAndRelocateBoxes;
    insertItemAndRelocateBoxes = insertItemAndRelocateBoxes.bind($p);

    function removeOptionAndRelocateBoxes(o) {
        removeBoxOption(o);
        o.setStatus(1);
    }
    $p.removeOptionAndRelocateBoxes = removeOptionAndRelocateBoxes;
    removeOptionAndRelocateBoxes = removeOptionAndRelocateBoxes.bind($p);

    function insertOptionAndRelocateBoxes(o) {
        o.setStatus(3);
        insertBoxOption(o);
    }
    $p.insertOptionAndRelocateBoxes = insertOptionAndRelocateBoxes;
    insertOptionAndRelocateBoxes = insertOptionAndRelocateBoxes.bind($p);

    function insertBoxCommand(aBox) {
        aBox.setStatus(3);
        if (bcHead == null) {
            bcHead = aBox;
        } else {
            var bPointer = bcHead;
            while (bPointer.next != null) {
                bPointer = bPointer.next;
            }
            bPointer.next = aBox;
        }
    }
    $p.insertBoxCommand = insertBoxCommand;
    insertBoxCommand = insertBoxCommand.bind($p);

    function insertBoxItem(aBox) {
        if (aBox.getKey() != allsongsKey) aBox.setStatus(3);
        if (biHead == null) {
            biHead = aBox;
        } else {
            var bPointer = biHead;
            while (bPointer.next != null) {
                bPointer = bPointer.next;
            }
            bPointer.next = aBox;
        }
    }
    $p.insertBoxItem = insertBoxItem;
    insertBoxItem = insertBoxItem.bind($p);

    function insertBoxOption(aBox) {
        aBox.setStatus(3);
        if (boHead == null) {
            boHead = aBox;
        } else {
            var bPointer = boHead;
            while (bPointer.next != null) {
                bPointer = bPointer.next;
            }
            bPointer.next = aBox;
        }
    }
    $p.insertBoxOption = insertBoxOption;
    insertBoxOption = insertBoxOption.bind($p);

    function removeBoxCommand(aBox) {
        if (aBox.getStatus() == 3) {
            aBox.setStatus(1);
            var aPointer = null;
            if ($p.__equals(aBox, bcHead)) {
                aPointer = bcHead;
                bcHead = bcHead.next;
                aPointer.next = null;
            } else {
                var bPointer = bcHead;
                while (!$p.__equals(aBox, bPointer.next)) {
                    bPointer = bPointer.next;
                }
                aPointer = bPointer.next;
                bPointer.next = bPointer.next.next;
                aPointer.next = null;
            }
        }
    }
    $p.removeBoxCommand = removeBoxCommand;
    removeBoxCommand = removeBoxCommand.bind($p);

    function removeBoxItem(aBox) {
        if (aBox.getStatus() == 3) {
            aBox.comma = "";
            aBox.setStatus(1);
            var aPointer = null;

            if ($p.__equals(aBox, biHead)) {
                aPointer = biHead;
                biHead = biHead.next;
                aPointer.next = null;
            } else {
                var bPointer = biHead;
                while (!$p.__equals(aBox, bPointer.next)) {
                    bPointer = bPointer.next;
                }
                aPointer = bPointer.next;
                bPointer.next = bPointer.next.next;
                aPointer.next = null;
            }
        }
    }
    $p.removeBoxItem = removeBoxItem;
    removeBoxItem = removeBoxItem.bind($p);

    function removeBoxOption(aBox) {
        if (aBox.getStatus() == 3) {
            aBox.comma = "";
            aBox.setStatus(1);
            var aPointer = null;
            if ($p.__equals(aBox, boHead)) {
                aPointer = boHead;
                boHead = boHead.next;
                aPointer.next = null;
            } else {
                var bPointer = boHead;
                while (!$p.__equals(aBox, bPointer.next)) {
                    bPointer = bPointer.next;
                }
                aPointer = bPointer.next;
                bPointer.next = bPointer.next.next;
                aPointer.next = null;
            }
        }
    }
    $p.removeBoxOption = removeBoxOption;
    removeBoxOption = removeBoxOption.bind($p);

    var hasMoreLines = false;

    function relocateBoxes() {
        startingHPosC = 0;
        for (var $it24 = new $p.ObjectIterator(cboxes), c = void(0); $it24.hasNext() && ((c = $it24.next()) || true);) {
            if (c.getStatus() != 3) {
                startingHPosC += c.boxWidth + boxHorizontalGap;
            }
        }
        posHCounter = ($p.width - startingHPosC + boxHorizontalGap) / 2;
        posVCounterC = marginTopC;

        for (var $it25 = new $p.ObjectIterator(cboxes), c = void(0); $it25.hasNext() && ((c = $it25.next()) || true);) {
            if (c.getStatus() != 3) {
                if (posHCounter + c.boxWidth > $p.width - marginLeftRight) {
                    posHCounter = marginLeftRight;
                    posVCounterC += c.boxHeight + boxVerticalGap;
                }
                c.reallocate(posHCounter, posVCounterC);
                posHCounter += c.boxWidth + boxHorizontalGap;
            }
        }

        startingHPosI = 0;
        for (var $it26 = new $p.ObjectIterator(iboxes), i = void(0); $it26.hasNext() && ((i = $it26.next()) || true);) {
            if (i.getStatus() != 3) {
                startingHPosI += i.boxWidth + boxHorizontalGap;
            }
        }
        posHCounter = ($p.width - startingHPosI + boxHorizontalGap) / 2;
        posVCounterI = posVCounterC + cboxes[0].boxHeight + boxVerticalGap + 10;

        for (var $it27 = new $p.ObjectIterator(iboxes), i = void(0); $it27.hasNext() && ((i = $it27.next()) || true);) {
            if (i.getStatus() != 3) {
                if (posHCounter + i.boxWidth > $p.width - marginLeftRight) {
                    posHCounter = marginLeftRight;
                    posVCounterI += i.boxHeight + boxVerticalGap;
                }
                i.reallocate(posHCounter, posVCounterI);
                posHCounter += i.boxWidth + boxHorizontalGap;
            }
        }

        startingHPosO = 0;
        for (var $it28 = new $p.ObjectIterator(oboxes), o = void(0); $it28.hasNext() && ((o = $it28.next()) || true);) {
            if (o.getStatus() != 3) {
                startingHPosO += o.boxWidth + boxHorizontalGap;
            }
        }
        posHCounter = ($p.width - startingHPosO + boxHorizontalGap) / 2;
        posVCounterO = posVCounterI + iboxes[0].boxHeight + boxVerticalGap + 10;

        for (var $it29 = new $p.ObjectIterator(oboxes), o = void(0); $it29.hasNext() && ((o = $it29.next()) || true);) {
            if (o.getStatus() != 3) {
                if (posHCounter + o.boxWidth > $p.width - marginLeftRight) {
                    posHCounter = marginLeftRight;
                    posVCounterO += o.boxHeight + boxVerticalGap;
                }
                o.reallocate(posHCounter, posVCounterO);
                posHCounter += o.boxWidth + boxHorizontalGap;
            }
        }

        posHCounterSentence = marginLeftRight + promptGap / 2;
        if (mobile) {
            posVCounterSentence = $p.height / 2 + marginTopC;
        } else {
            posVCounterSentence = $p.height - (fontSizeRef * 3) + marginTopC;
        }
        posHPrompt = posHCounterSentence - punctuationGapLR;
        posVClosedParenthesis = posVPrompt = posVCounterSentence;

        var bcPointer = bcHead;
        var biPointer = biHead;
        var boPointer = boHead;

        sentence = new $p.ArrayList();

        var numCommands = 0;
        var numItems = 0;
        var numOptions = 0;

        while (bcPointer != null) {
            sentence.add(bcPointer.getKey());
            if (posHCounterSentence + bcPointer.boxWidth > $p.width - marginLeftRight - executeButtonGap) {
                posHCounterSentence = marginLeftRight + promptGap;
                posVCounterSentence += bcPointer.boxHeight + boxVerticalGap;
            }
            bcPointer.reallocate(posHCounterSentence, posVCounterSentence);
            posHCounterSentence += bcPointer.boxWidth + punctuationGapLR;
            numCommands++;
            bcPointer.openParenthesis = "(";
            posHClosedParenthesis = posHPrompt = posHCounterSentence;
            posVClosedParenthesis = posVPrompt = posVCounterSentence;
            bcPointer.closedParenthesis = ")";

            bcPointer = bcPointer.next;
        }

        if (numCommands == 0) {
            for (var $it30 = new $p.ObjectIterator(cboxes), c = void(0); $it30.hasNext() && ((c = $it30.next()) || true);) {
                c.openParenthesis = "";
                c.closedParenthesis = "";
            }
            execStatus = false;
        }

        var first = "";
        var last = "";
        var isFirst = true;
        var containsAllSongs = false;

        while (biPointer != null) {
            sentence.add(biPointer.getKey());
            if (posHCounterSentence + biPointer.boxWidth > $p.width - marginLeftRight - executeButtonGap) {
                posHCounterSentence = marginLeftRight + promptGap / 2 + punctuationGapLR / 2;
                posVCounterSentence += biPointer.boxHeight + boxVerticalGap;
            }
            if (biPointer.getKey() != allsongsKey) {
                numItems++;
                if (numItems == 1) {
                    posHCounterSentence += punctuationGapLR / 2;
                }
                if (numItems >= 1) {
                    if (isFirst) {
                        first = biPointer.getKey();
                        last = biPointer.getKey();
                    } else {
                        last = biPointer.getKey();
                    }
                }
            } else {
                containsAllSongs = true;
            }

            biPointer.reallocate(posHCounterSentence, posVCounterSentence);
            posHCounterSentence += biPointer.boxWidth + boxHorizontalGapCommandLine;
            biPointer = biPointer.next;
            isFirst = false;
            execStatus = true;
        }

        if (containsAllSongs) {
            posHClosedParenthesis = posHPrompt = posHCounterSentence - punctuationGapLR;
            posVClosedParenthesis = posVPrompt = posVCounterSentence;
        }
        if (numItems == 0) {
            for (var $it31 = new $p.ObjectIterator(iboxes), i = void(0); $it31.hasNext() && ((i = $it31.next()) || true);) {
                i.openBrackets = "";
                i.closedBrackets = "";
                i.comma = "";
            }
        } else {
            posHClosedParenthesis = posHPrompt = posHCounterSentence - punctuationGapLR / 2;
            posVClosedParenthesis = posVPrompt = posVCounterSentence;
            if (first == last) {
                for (var $it32 = new $p.ObjectIterator(iboxes), i = void(0); $it32.hasNext() && ((i = $it32.next()) || true);) {
                    if (i.getKey() == first) {
                        i.comma = "";
                        i.openBrackets = "[";
                        i.closedBrackets = "]";
                        posHCounterSentence += punctuationGapLR / 2;
                    }
                }
            } else {
                for (var $it33 = new $p.ObjectIterator(iboxes), i = void(0); $it33.hasNext() && ((i = $it33.next()) || true);) {
                    if (i.getStatus() == 3) {
                        if (i.getKey() == first) {
                            i.closedBrackets = "";
                            i.openBrackets = "[";
                            i.comma = "";
                        } else if (i.getKey() == last) {
                            i.comma = ",";
                            i.openBrackets = "";
                            i.closedBrackets = "]";
                            posHCounterSentence += punctuationGapLR / 2;
                        } else {
                            i.comma = ",";
                            i.openBrackets = "";
                            i.closedBrackets = "";
                        }
                    }
                }
            }
        }

        while (boPointer != null) {
            sentence.add(boPointer.getKey());
            numOptions++;
            if (posHCounterSentence + boPointer.boxWidth > $p.width - marginLeftRight - executeButtonGap) {
                posHCounterSentence = marginLeftRight + promptGap / 2 + punctuationGapLR / 2;
                posVCounterSentence += boPointer.boxHeight + boxVerticalGap;
            }

            boPointer.reallocate(posHCounterSentence, posVCounterSentence);
            posHCounterSentence += boPointer.boxWidth + boxHorizontalGapCommandLine;
            boPointer = boPointer.next;
        }

        if (numOptions >= 1) {
            posHClosedParenthesis = posHPrompt = posHCounterSentence - punctuationGapLR;
            posVClosedParenthesis = posVPrompt = posVCounterSentence;
            for (var $it34 = new $p.ObjectIterator(oboxes), o = void(0); $it34.hasNext() && ((o = $it34.next()) || true);)
            o.comma = ",";
        } else {
            for (var $it35 = new $p.ObjectIterator(oboxes), o = void(0); $it35.hasNext() && ((o = $it35.next()) || true);)
            o.comma = "";
        }
    }
    $p.relocateBoxes = relocateBoxes;
    relocateBoxes = relocateBoxes.bind($p);

})